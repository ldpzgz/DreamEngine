vs{
	#version 300 es
    layout(location = 0) in vec4 aPos;
    layout(location = 1) in vec2 aTexCoord;
	layout(location = 2) in vec3 aNormal;
	layout(location = 3) in vec3 aTangent;
	
	uniform mat4 mvp_matrix;
	uniform mat4 mvMat;
	uniform vec3 lightPos;
    uniform vec3 viewPos;
	
    out vec2 vTexCoord;
	out vec3 TangentLightPos;
    out vec3 TangentViewPos;
    out vec3 TangentFragPos;
    void main()
    {
       gl_Position = mvp_matrix * aPos;
       vTexCoord = aTexCoord;
	   
	   vec3 T = normalize(vec3(mvMat * vec4(aTangent, 0.0)));
	   vec3 N = normalize(vec3(mvMat * vec4(aNormal, 0.0)));
	   T = normalize(T - dot(T, N) * N);
	   // then retrieve perpendicular vector B with the cross product of T and N
	   vec3 B = cross(N, T);

	   mat3 TBN = mat3(T, B, N);
	   TangentLightPos = TBN * lightPos;
       TangentViewPos  = TBN * viewPos;
       TangentFragPos  = TBN * vec3(mvMat * aPos);
    }
}

fs{
	#version 300 es
	precision mediump float;
	in vec2 vTexCoord;
	in vec3 TangentLightPos;
    in vec3 TangentViewPos;
    in vec3 TangentFragPos;
	
	layout(location = 0) out vec4 fragColor;
	uniform vec3 lightColor;
	uniform sampler2D s_texture;
	uniform sampler2D s_normal;
	void main()
	{
		vec3 normal = texture( s_normal, vTexCoord ).rgb;
		normal = normalize(normal * 2.0 - 1.0);
		
		vec3 lightDir = normalize(TangentLightPos - TangentFragPos);
		vec3 viewDir  = normalize(TangentViewPos - TangentFragPos);
		
		vec3 objectColor = texture( s_texture, vTexCoord ).rgb;
		float gamma = 1.8f;
		objectColor = pow(objectColor, vec3(1.0f/gamma));
		
		//ambient 
	    float ambientStrength = 0.1;
        vec3 ambient = ambientStrength * lightColor;
		
		//diffuse
        float diff = max(dot(normal, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;
	    
	    //specular
	    float specularStrength = 0.5;
	    vec3 halfwayDir = normalize(lightDir + viewDir);
	    float spec = pow(max(dot(normal, halfwayDir), 0.0f), 32.0f);
        vec3 specular = specularStrength * spec * lightColor;
	    
	    //result
	    vec3 result = (ambient + diffuse + specular) * objectColor;
        fragColor = vec4(result, 1.0);
	}
}

program:posTextureTbnLight{
	posLoc=0
	texcoordLoc=1
	normalLoc=2
	tangentLoc=3
	mvpMatrix=mvp_matrix
	mvMatrix=mvMat
	lightPos=lightPos
	viewPos=viewPos
	lightColor=lightColor
	sampler{
		s_texture=none
		s_normal=none
	}
}

