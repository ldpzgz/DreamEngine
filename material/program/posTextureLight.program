vs{
	#version 300 es
    layout (location = 0) in vec3 aPos;
	layout (location = 1) in vec3 aNormal;
	layout (location = 2) in vec2 aTexCoord;
	uniform mat4 mvpMatrix;
	uniform mat4 mvMat;
    out vec2 vTexCoord;
	out vec3 vNormal;
	out vec3 vPos;
    void main()
    {
       gl_Position = mvpMatrix * vec4(aPos,1.0f);
       vTexCoord = aTexCoord;
	   vPos = vec3(mvMat * vec4(aPos, 1.0f));
	   vNormal = mat3(mvMat) * aNormal;
    }
}

fs{
	#version 300 es
	precision mediump float;
	in vec2 vTexCoord;
	in vec3 vNormal;
	in vec3 vPos;
	layout(location = 0) out vec4 fragColor;
	
	uniform vec3 lightPos;
	uniform vec3 viewPos;
	uniform vec3 lightColor;
	uniform sampler2D s_texture;
	void main()
	{
	  vec3 objectColor = texture( s_texture, vTexCoord ).rgb;
	  //ambient 
	  float ambientStrength = 0.1;
      vec3 ambient = ambientStrength * lightColor;
	  
	  //diffuse
	  vec3 normal = normalize(vNormal);
	  vec3 lightDir = normalize(lightPos - vPos);
      float diff = max(dot(normal, lightDir), 0.0);
      vec3 diffuse = diff * lightColor;
	  
	  //specular
	  float specularStrength = 0.5;
	  vec3 viewDir = normalize(viewPos - vPos);
	  vec3 halfwayDir = normalize(lightDir + viewDir);
      //vec3 reflectDir = reflect(-lightDir, normal);
	  float spec = pow(max(dot(normal, halfwayDir), 0.0f), 32.0f);
      vec3 specular = specularStrength * spec * lightColor;
	  
	  //result 
	  vec3 result =  (ambient + diffuse + specular) *objectColor;
      fragColor = vec4(result, 1.0);
	}
}

program:posTextureLight{
	posLoc=0
	normalLoc=1
	texcoordLoc=2
	mvpMatrix=mvpMatrix
	mvMatrix=mvMat
	lightPos=lightPos
	viewPos=viewPos
	lightColor=lightColor
	sampler{
		s_texture=none
	}
}
