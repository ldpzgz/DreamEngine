vs{
	#version 300 es
    layout(location = 0) in vec3 a_position;
	layout (std140) uniform Matrixes
	{
		mat4 projMat;
		mat4 viewMat;
		mat4 shadowMat;
	};
    out vec3 WorldPos;
    void main()
    {
       gl_Position = projMat * viewMat * vec4(a_position,1.0f);
       WorldPos = a_position;
    }
}

fs{
	#version 300 es
	precision mediump float;
	in vec3 WorldPos;
	layout(location = 0) out vec4 FragColorR;
	layout(location = 1) out vec4 FragColorG;
	layout(location = 2) out vec4 FragColorB;
	uniform samplerCube skybox;
	const float PI = 3.14159265359f;
	const float scaleBy = 0.001f;
	const vec4 scale1 = vec4(1.0f, 255.0f, 65025.0f, 16581375.0f);
	const vec4 scale2 = vec4(1.0f / 255.0f, 1.0f / 255.0f, 1.0f / 255.0f, 0);
	vec4 EncodeFloatRGBA(float v)
	{
	   vec4 enc = scale1 * v;
	   enc = fract(enc);
	   enc -= enc.yzww * scale2;
	   return enc;
	}
	void main()
	{		
		// The world vector acts as the normal of a tangent surface
		// from the origin, aligned to WorldPos. Given this normal, calculate all
		// incoming radiance of the environment. The result of this radiance
		// is the radiance of light coming from -Normal direction, which is what
		// we use in the PBR shader to sample irradiance.
		vec3 N = normalize(WorldPos);

		vec3 irradiance = vec3(0.0f);   
		
		// tangent space calculation from origin point
		vec3 up    = vec3(0.0f, 1.0f, 0.0f);
		vec3 right = normalize(cross(up, N));
		up         = normalize(cross(N, right));
		   
		float sampleDelta = 0.025f;
		float nrSamples = 0.0f;
		for(float phi = 0.0f; phi < 2.0f * PI; phi += sampleDelta)
		{
			for(float theta = 0.0f; theta < 0.5f * PI; theta += sampleDelta)
			{
				// spherical to cartesian (in tangent space)
				vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
				// tangent space to world
				vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

				irradiance += texture(skybox, sampleVec).rgb * cos(theta) * sin(theta);
				nrSamples++;
			}
		}
		irradiance = PI * irradiance * (1.0f / float(nrSamples));
		
		//FragColor = vec4(irradiance, 1.0f);
		FragColorR = EncodeFloatRGBA(irradiance.r*scaleBy);
		FragColorG = EncodeFloatRGBA(irradiance.g*scaleBy);
		FragColorB = EncodeFloatRGBA(irradiance.b*scaleBy);
	}
}

program:irradianceConvolution{
	posLoc=0
	sampler{
		skybox=none
	}
	ubo{
		Matrixes=0
	}
}
