vs{
	#version 330 core
	#define mad(a, b, c) (a * b + c)

	layout(location = 0) in vec3 inPos;
    layout(location = 1) in vec2 inTexcoord;

	layout (std140) uniform ScreenWH
	{
		float screenWidth;
		float screenHeight;
	};

	out vec2 texcoord;
	out vec4 vOffset;

	void main() {
		vec4 SMAA_RT_METRICS = vec4(1.0 / screenWidth, 1.0 / screenHeight, screenWidth, screenHeight);

		texcoord = inTexcoord;
		vOffset = mad(SMAA_RT_METRICS.xyxy, vec4(1.0, 0.0, 0.0,  1.0), texcoord.xyxy);

		gl_Position = vec4(inPos, 1.0);
	}
}
fs{
	#version 330 core
	precision highp float;

	#define mad(a, b, c) (a * b + c)

	uniform sampler2D colorTex;
	uniform sampler2D blendTex;

	layout (std140) uniform ScreenWH
	{
		float screenWidth;
		float screenHeight;
	};

	in vec2 texcoord;
	in vec4 vOffset;
	
	layout(location = 0) out vec4 outColor;

	vec4 SMAA_RT_METRICS = vec4(1.0 / screenWidth, 1.0 / screenHeight, screenWidth, screenHeight);

	/**
	 * Conditional move:
	 */
	void SMAAMovc(bvec2 cond, inout vec2 variable, vec2 value) {
	  if (cond.x) variable.x = value.x;
	  if (cond.y) variable.y = value.y;
	}

	void SMAAMovc(bvec4 cond, inout vec4 variable, vec4 value) {
	  SMAAMovc(cond.xy, variable.xy, value.xy);
	  SMAAMovc(cond.zw, variable.zw, value.zw);
	}

	void main() {
		vec4 color;

		// Fetch the blending weights for current pixel:
		vec4 a;
		a.x = texture2D(blendTex, vOffset.xy).a; // Right
		a.y = texture2D(blendTex, vOffset.zw).g; // Top
		a.wz = texture2D(blendTex, texcoord).xz; // Bottom / Left

		// Is there any blending weight with a value greater than 0.0?
		if (dot(a, vec4(1.0, 1.0, 1.0, 1.0)) <= 1e-5) {
		color = texture2D(colorTex, texcoord); // LinearSampler
		} else {
		bool h = max(a.x, a.z) > max(a.y, a.w); // max(horizontal) > max(vertical)

		// Calculate the blending offsets:
		vec4 blendingOffset = vec4(0.0, a.y, 0.0, a.w);
		vec2 blendingWeight = a.yw;
		SMAAMovc(bvec4(h, h, h, h), blendingOffset, vec4(a.x, 0.0, a.z, 0.0));
		SMAAMovc(bvec2(h, h), blendingWeight, a.xz);
		blendingWeight /= dot(blendingWeight, vec2(1.0, 1.0));

		// Calculate the texture coordinates:
		vec4 blendingCoord = mad(blendingOffset, vec4(SMAA_RT_METRICS.xy, -SMAA_RT_METRICS.xy), texcoord.xyxy);

		// We exploit bilinear filtering to mix current pixel with the chosen
		// neighbor:
		color = blendingWeight.x * texture2D(colorTex, blendingCoord.xy); // LinearSampler
		color += blendingWeight.y * texture2D(colorTex, blendingCoord.zw); // LinearSampler
		}

		outColor = color;
	}

}
program:smaaBlend{
	posLoc=0
	texcoordLoc=1
	sampler{
		colorTex=none
		blendTex=none
	}
	ubo{
		ScreenWH=2
	}
}