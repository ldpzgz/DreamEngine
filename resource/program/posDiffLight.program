vs{
	#version 300 es
    layout (location = 0) in vec3 aPos;
	layout (location = 1) in vec3 aNormal;
	layout (location = 2) in vec2 aTexCoord;
	layout (std140) uniform Matrixes
	{
		mat4 projMat;
		mat4 viewMat;
		mat4 shadowMat;
	};
	uniform mat4 modelMat;
    out vec2 vTexCoord;
	out vec3 vNormal;
	out vec3 vPos;
    void main()
    {
		mat4 mvMat = viewMat * modelMat;
       gl_Position = projMat * mvMat * vec4(aPos,1.0f);
       vTexCoord = aTexCoord;
	   vPos = vec3(mvMat * vec4(aPos, 1.0f));
	   vNormal = mat3(mvMat) * aNormal;
    }
}

fs{
	#version 300 es
	precision mediump float;
	in vec2 vTexCoord;
	in vec3 vNormal;
	in vec3 vPos;
	layout(location = 0) out vec4 fragColor;
	const vec3 viewPos=vec3(0.0f,0.0f,0.0f);
	layout (std140) uniform Lights
	{
		vec3 lightPositions[15];
		vec3 lightColors[15];
		int lightCounts;
	};
	uniform vec3 lightPos;
	uniform vec3 lightColor;
	uniform sampler2D s_texture;
	void main()
	{
		
	  vec3 objectColor = texture( s_texture, vTexCoord ).rgb;
	  //ambient 
	  float ambientStrength = 0.1;
      vec3 ambient = ambientStrength * lightColors[0];
	  
	  //diffuse
	  vec3 normal = normalize(vNormal);
	  vec3 lightDir = normalize(lightPositions[0] - vPos);
      float diff = max(dot(normal, lightDir), 0.0);
      vec3 diffuse = diff * lightColors[0];
	  
	  //specular
	  float specularStrength = 0.5;
	  vec3 viewDir = normalize(viewPos - vPos);
	  vec3 halfwayDir = normalize(lightDir + viewDir);
      //vec3 reflectDir = reflect(-lightDir, normal);
	  float spec = pow(max(dot(normal, halfwayDir), 0.0f), 32.0f);
      vec3 specular = specularStrength * spec * lightColors[0];
	  
	  //result 
	  vec3 result =  (ambient + diffuse + specular) *objectColor;
      fragColor = vec4(result, 1.0);
	}
}

program:posDiffLight{
	posLoc=0
	normalLoc=1
	texcoordLoc=2
	modelMatrix=modelMat
	sampler{
		s_texture=none
	}
	ubo{
		Matrixes=0
		Lights=1
	}
}
