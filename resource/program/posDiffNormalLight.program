vs{
	#version 300 es
    layout(location = 0) in vec4 aPos;
    layout(location = 1) in vec2 aTexCoord;
	layout(location = 2) in vec3 aNormal;
	
	uniform mat4 projMat;
	uniform mat4 viewMat;
	uniform mat4 modelMat;
	
    out vec2 vTexCoord;
	out vec3 Normal;
	out vec3 WorldPos;
	
	
    void main()
    {
		mat4 mvMat = viewMat*modelMat;
       gl_Position = projMat * mvMat * aPos;
	   
       vTexCoord = aTexCoord;
	   WorldPos = vec3(mvMat * aPos);
	   Normal = mat3(mvMat) * aNormal;
    }
}

fs{
	#version 300 es
	precision mediump float;
	in vec2 vTexCoord;
	in vec3 Normal;
	in vec3 WorldPos;
	
	layout(location = 0) out vec4 fragColor;
	uniform vec3 lightColor;
	uniform sampler2D s_texture;
	uniform sampler2D s_normal;
	uniform vec3 lightPos;
    uniform vec3 camPos;
	
	vec3 getNormalFromMap()
	{
		vec3 tangentNormal = texture(s_normal, vTexCoord).xyz * 2.0 - 1.0;

		vec3 Q1  = dFdx(WorldPos);
		vec3 Q2  = dFdy(WorldPos);
		vec2 st1 = dFdx(vTexCoord);
		vec2 st2 = dFdy(vTexCoord);

		vec3 N   = normalize(Normal);
		vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
		vec3 B  = normalize(cross(N, T));
		mat3 TBN = mat3(T, B, N);

		return normalize(TBN * tangentNormal);
	}
	
	void main()
	{
		vec3 normal = getNormalFromMap();
		vec3 viewDir = normalize(camPos - WorldPos);
		
		vec3 lightDir = normalize(lightPos - WorldPos);
		
		vec3 objectColor = texture( s_texture, vTexCoord ).rgb;
		//ambient 
	    float ambientStrength = 0.1;
        vec3 ambient = ambientStrength * lightColor;
		
		//diffuse
        float diff = max(dot(normal, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;
	    
	    //specular
	    float specularStrength = 0.5;
	    vec3 halfwayDir = normalize(lightDir + viewDir);
	    float spec = pow(max(dot(normal, halfwayDir), 0.0f), 32.0f);
        vec3 specular = specularStrength * spec * lightColor;
	    
	    //result
	    vec3 result = (ambient + diffuse + specular) * objectColor;
        fragColor = vec4(result, 1.0);
	}
}

program:posDiffNormalLight{
	posLoc=0
	texcoordLoc=1
	normalLoc=2
	projMatrix=projMat
	modelMatrix=modelMat
	viewMatrix=viewMat
	lightPos=lightPos
	lightColor=lightColor
	viewPos=camPos
	sampler{
		s_texture=none
		s_normal=none
	}
}

