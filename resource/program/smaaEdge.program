vs{
	#version 330 core
	
	#define mad(a, b, c) (a * b + c)

	layout (location = 0) in vec3 inPos;

	layout (std140) uniform ScreenWH
	{
		float screenWidth;
		float screenHeight;
	};

	out vec2 texcoord;
	out vec4 vOffset[3];

	void main() {
		vec4 SMAA_RT_METRICS = vec4(1.0 / screenWidth, 1.0 / screenHeight, screenWidth, screenHeight);

		texcoord = vec2((inPos + 1.0) / 2.0);

		vOffset[0] = mad(SMAA_RT_METRICS.xyxy, vec4(-1.0, 0.0, 0.0, -1.0), texcoord.xyxy);
		vOffset[1] = mad(SMAA_RT_METRICS.xyxy, vec4( 1.0, 0.0, 0.0,  1.0), texcoord.xyxy);
		vOffset[2] = mad(SMAA_RT_METRICS.xyxy, vec4(-2.0, 0.0, 0.0, -2.0), texcoord.xyxy);

		gl_Position = vec4(inPos, 1.0);
	}
}
fs{
	/**
	 * Color Edge Detection
	 *
	 * IMPORTANT NOTICE: color edge detection requires gamma-corrected colors, and
	 * thus 'colorTex' should be a non-sRGB texture.
	 */
	#version 330 core
	precision highp float;

	#ifndef SMAA_THRESHOLD
	#define SMAA_THRESHOLD 0.1
	#endif

	#ifndef SMAA_LOCAL_CONTRAST_ADAPTATION_FACTOR
	#define SMAA_LOCAL_CONTRAST_ADAPTATION_FACTOR 2.0
	#endif

	uniform sampler2D colorTex;

	in vec2 texcoord;
	in vec4 vOffset[3];
	out vec2 outColor;

	void main() {
	  // Calculate the threshold:
	  vec2 threshold = vec2(SMAA_THRESHOLD);

	  // Calculate color deltas:
	  vec4 delta;
	  vec3 c = texture2D(colorTex, texcoord).rgb;

	  vec3 cLeft = texture2D(colorTex, vOffset[0].xy).rgb;
	  vec3 t = abs(c - cLeft);
	  delta.x = max(max(t.r, t.g), t.b);

	  vec3 cTop  = texture2D(colorTex, vOffset[0].zw).rgb;
	  t = abs(c - cTop);
	  delta.y = max(max(t.r, t.g), t.b);

	  // We do the usual threshold:
	  vec2 edges = step(threshold, delta.xy);

	  // Then discard if there is no edge:
	  if (dot(edges, vec2(1.0, 1.0)) == 0.0)
		  discard;

	  // Calculate right and bottom deltas:
	  vec3 cRight = texture2D(colorTex, vOffset[1].xy).rgb;
	  t = abs(c - cRight);
	  delta.z = max(max(t.r, t.g), t.b);

	  vec3 cBottom  = texture2D(colorTex, vOffset[1].zw).rgb;
	  t = abs(c - cBottom);
	  delta.w = max(max(t.r, t.g), t.b);

	  // Calculate the maximum delta in the direct neighborhood:
	  vec2 maxDelta = max(delta.xy, delta.zw);

	  // Calculate left-left and top-top deltas:
	  vec3 cLeftLeft  = texture2D(colorTex, vOffset[2].xy).rgb;
	  t = abs(c - cLeftLeft);
	  delta.z = max(max(t.r, t.g), t.b);

	  vec3 cTopTop = texture2D(colorTex, vOffset[2].zw).rgb;
	  t = abs(c - cTopTop);
	  delta.w = max(max(t.r, t.g), t.b);

	  // Calculate the final maximum delta:
	  maxDelta = max(maxDelta.xy, delta.zw);
	  float finalDelta = max(maxDelta.x, maxDelta.y);

	  // Local contrast adaptation:
	  edges.xy *= step(finalDelta, SMAA_LOCAL_CONTRAST_ADAPTATION_FACTOR * delta.xy);

	  outColor = edges;
	}
}
program:smaaEdge{
	posLoc=0
	sampler2D{
		colorTex=none
	}
	ubo{
		ScreenWH=2
	}
}