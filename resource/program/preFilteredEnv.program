vs{
	#version 330 core
    layout(location = 0) in vec3 a_position;
	uniform mat4 projMat;
	uniform mat4 mvMat;
    out vec3 WorldPos;
    void main()
    {
       gl_Position = projMat * mvMat * vec4(a_position,1.0f);
       WorldPos = a_position;
    }
}

fs{
	#version 330 core
	precision mediump float;
	in vec3 WorldPos;
	layout(location = 0) out vec4 FragColorR;
	layout(location = 1) out vec4 FragColorG;
	layout(location = 2) out vec4 FragColorB;
	uniform float rough;
	uniform samplerCube skybox;
	const float PI = 3.14159265359f;
	const float scaleBy = 0.001f;
	const vec4 scale1 = vec4(1.0f, 255.0f, 65025.0f, 16581375.0f);
	const vec4 scale2 = vec4(1.0f / 255.0f, 1.0f / 255.0f, 1.0f / 255.0f, 0);
	vec4 EncodeFloatRGBA(float v)
	{
	   vec4 enc = scale1 * v;
	   enc = fract(enc);
	   enc -= enc.yzww * scale2;
	   return enc;
	}
	
	float RadicalInverse_VdC(uint bits) 
	{
		bits = (bits << 16u) | (bits >> 16u);
		bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
		bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
		bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
		bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
		return float(bits) * 2.3283064365386963e-10; // / 0x100000000
	}
	// ----------------------------------------------------------------------------
	vec2 Hammersley(uint i, uint N)
	{
		return vec2(float(i)/float(N), RadicalInverse_VdC(i));
	}
	vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
	{
		float a = roughness*roughness;
		
		float phi = 2.0f * PI * Xi.x;
		float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a*a - 1.0) * Xi.y));
		float sinTheta = sqrt(1.0f - cosTheta*cosTheta);
		
		// from spherical coordinates to cartesian coordinates
		vec3 H;
		H.x = cos(phi) * sinTheta;
		H.y = sin(phi) * sinTheta;
		H.z = cosTheta;
		
		// from tangent-space vector to world-space sample vector
		vec3 up        = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
		vec3 tangent   = normalize(cross(up, N));
		vec3 bitangent = cross(N, tangent);
		
		vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
		return normalize(sampleVec);
	}	
	
	void main()
	{		
		vec3 N = normalize(WorldPos);    
		vec3 R = N;
		vec3 V = R;

		const uint SAMPLE_COUNT = 1024u;
		float totalWeight = 0.0f;   
		vec3 prefilteredColor = vec3(0.0f);     
		for(uint i = 0u; i < SAMPLE_COUNT; ++i)
		{
			vec2 Xi = Hammersley(i, SAMPLE_COUNT);
			vec3 H  = ImportanceSampleGGX(Xi, N, rough);
			vec3 L  = normalize(2.0f * dot(V, H) * H - V);

			float NdotL = max(dot(N, L), 0.0f);
			if(NdotL > 0.0)
			{
				prefilteredColor += texture(skybox, L).rgb * NdotL;
				totalWeight      += NdotL;
			}
		}
		prefilteredColor = prefilteredColor / totalWeight;

		FragColorR = EncodeFloatRGBA(prefilteredColor.r*scaleBy);
		FragColorG = EncodeFloatRGBA(prefilteredColor.g*scaleBy);
		FragColorB = EncodeFloatRGBA(prefilteredColor.b*scaleBy);
	}
}

program:preFilteredEnv{
	posLoc=0
	projMatrix=projMat
	mvMatrix=mvMat
	roughness=rough
	sampler{
		skybox=none
	}
}
