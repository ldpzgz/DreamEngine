vs{
	#version 330 core
    layout(location = 0) in vec3 inPos;
    layout(location = 1) in vec2 inTexcoord;
    out vec2 texCoord;
    void main()
    {
       gl_Position = vec4(inPos,1.0f);
       texCoord = inTexcoord;
    }
}

fs{
	#version 330 core
	precision highp float;
	in vec2 texCoord;
	out vec4 FragColor;

	uniform sampler2D posMap;
	uniform sampler2D normalMap;
	uniform sampler2D noiseMap;

	layout (std140) uniform SampleArray
	{
		vec3 samples[64];
	};

	// parameters (you'd probably want to use them as uniforms to more easily tweak the effect)
	int kernelSize = 64;
	float radius = 0.5;
	float bias = 0.025;

	// tile noise texture over screen based on screen dimensions divided by noise size
	//const vec2 noiseScale = vec2(800.0/4.0, 600.0/4.0); 

	uniform mat4 projection;

	void main()
	{
		vec2 texSize = vec2(textureSize(posMap, 0));
		vec2 noiseScale = texSize/4.0f;
		// get input for SSAO algorithm
		vec3 fragPos = texture(posMap, texCoord).xyz;
		vec3 normal = normalize(texture(normalMap, texCoord).rgb);
		vec3 randomVec = normalize(texture(noiseMap, texCoord * noiseScale).xyz);
		// create TBN change-of-basis matrix: from tangent-space to view-space
		vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
		vec3 bitangent = cross(normal, tangent);
		mat3 TBN = mat3(tangent, bitangent, normal);
		// iterate over the sample kernel and calculate occlusion factor
		float occlusion = 0.0;
		for(int i = 0; i < kernelSize; ++i)
		{
			// get sample position
			vec3 samplePos = TBN * samples[i]; // from tangent to view-space
			samplePos = fragPos + samplePos * radius; 
			
			// project sample position (to sample texture) (to get position on screen/texture)
			vec4 offset = vec4(samplePos, 1.0);
			offset = projection * offset; // from view to clip-space
			offset.xyz /= offset.w; // perspective divide
			offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
			
			// get sample depth
			float sampleDepth = texture(posMap, offset.xy).z; // get depth value of kernel sample
			
			// range check & accumulate
			float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
			occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;           
		}
		occlusion = 1.0 - (occlusion / kernelSize);
		
		FragColor.r = occlusion;
	}
}

program:ssao{
	posLoc=0
	texcoordLoc=1
	projMatrix=projection
	sampler{
		posMap=none
		normalMap=none
		noiseMap=none
	}
	ubo{
		SampleArray=0
	}
}